from aiogram import types, Router
from aiogram.filters import Command
import asyncio

from db_handlers.db_class import db
from exceptions.all_exceptions import *
from handlers.task import user_tasks
from utils.track_flight import track_flight
from utils.airport_codes import get_airport_name
from utils.aviasales_api import CURRENCY, get_price_for_date
from utils.validators import is_valid_date
from exceptions.error_handlers import *

router = Router()

MAX_ACTIVE_TRACKERS = 5


@router.message(Command("track"))
async def track_command(message: types.Message):
    telegram_id = message.chat.id
    await db.connect()
    try:
        args = message.text.split()[1:]
        if len(args) != 4:
            raise InvalidCommandError("‚ùó –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")

        origin = args[0].strip().upper()
        destination = args[1].strip().upper()
        dates = [d.strip() for d in args[2].split(",") if d.strip()]

        try:
            price_limit = int(args[3])
        except ValueError:
            raise InvalidCommandError("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü—Ä–∏–º–µ—Ä: 7000")

        user_id = await db.add_user(message.from_user.id, message.from_user.username)
        settings = await db.get_user_settings(message.from_user.id)
        active_count = await db.count_active_trackers(user_id)
        allowed_slots = MAX_ACTIVE_TRACKERS - active_count
        #allowed_slots < len(dates) –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ä–∞–∑—É
        if allowed_slots <= 0:
            raise TrackerLimitError(active_count, MAX_ACTIVE_TRACKERS)

        origin_name = get_airport_name(origin) or origin
        destination_name = get_airport_name(destination) or destination
        await message.answer(
            f"üì° –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–π—Å–æ–≤ <b>{origin_name}</b> ‚Üí <b>{destination_name}</b>\n"
            f"–î–∞—Ç—ã: <b>{', '.join(dates)}</b>\n"
            f"–¶–µ–Ω–∞ –Ω–∏–∂–µ <b>{price_limit} {CURRENCY.upper()}</b>"
        )

        skipped = []  # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (date, reason)

        for date in dates:
            # 1) –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞/–ø—Ä–æ—à–ª–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if not is_valid_date(date):
                raise InvalidDateError(date)

            # 2) –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ª–æ—Ç–æ–≤
            if allowed_slots <= 0:
                message = f"–î–∞—Ç–∞ {date} –ø—Ä–æ–ø—É—â–µ–Ω–∞."
                raise TrackerLimitError(active_count, MAX_ACTIVE_TRACKERS, message)

            flight = await get_price_for_date(origin, destination, date, settings)
            # 3) –µ—Å—Ç—å –ª–∏ —Ä–µ–π—Å—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            if not flight:
                raise NoFlightsError(date, origin, destination)

            # 4) –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API
            if isinstance(flight, dict) and flight.get("error"):
                raise APIError(date, origin, destination)

            # 5) –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –ë–î
            if await db.tracker_exists(user_id, origin, destination, date):
                skipped.append((date, "—É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è"))
                raise AlreadyExistError(date)

            tracker_id = await db.add_flight_tracker(user_id, origin, destination, date, price_limit)

            user_tasks.setdefault(message.from_user.id, [])
            task = asyncio.create_task(
                track_flight(
                    message.from_user.id,
                    origin,
                    destination,
                    date,
                    price_limit,
                    tracker_id,
                    settings,
                    initial_flight=flight  # –µ—Å–ª–∏ track_flight –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
                )
            )
            user_tasks[message.from_user.id].append(task)
            active_count += 1
            allowed_slots = MAX_ACTIVE_TRACKERS - active_count

    except InvalidCommandError as e:
        await handle_invalid_command_error(e, telegram_id)

    except TrackerLimitError as e:
        await handle_tracker_limit_error(e, telegram_id)

    except InvalidDateError as e:
        await handle_invalid_date_error(e, telegram_id)

    except APIError as e:
        await handle_api_error(e, telegram_id)

    except AlreadyExistError as e:
        await handle_already_exist_error(e, telegram_id)

    except Exception as e:
        await message.answer(
            "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n<code>/track LED KGD 2025-08-04,2025-08-05 7000</code>"
        )


@router.message(lambda msg: msg.text == "‚úà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å")
async def track_button_handler(message: types.Message):
    await message.answer(
        "üì• –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/track &lt;–∫–æ–¥_–≥–æ—Ä–æ–¥–∞_–≤—ã–ª–µ—Ç–∞&gt; &lt;–∫–æ–¥_–≥–æ—Ä–æ–¥–∞_–ø—Ä–∏–ª—ë—Ç–∞&gt; "
        "&lt;–¥–∞—Ç—ã_–≤—ã–ª–µ—Ç–∞_—á–µ—Ä–µ–∑_–∑–∞–ø—è—Ç—É—é&gt; &lt;–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è_—Ü–µ–Ω–∞&gt;</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/track LED KGD 2025-09-08,2025-09-09 7000</code>\n"
        "‚Ä¢ LED ‚Äî –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞\n"
        "‚Ä¢ KGD ‚Äî –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞\n"
        "‚Ä¢ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
        "‚Ä¢ 7000 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞\n\n"
    )
