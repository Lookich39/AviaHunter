from aiogram import types, Router, Dispatcher
from aiogram.filters import Command
from handlers.tasks import user_tasks
from utils.airport_codes import get_airport_name
from create_bot import bot
import asyncio
import aiohttp
import os

API_TOKEN = os.getenv("API_TOKEN")
CURRENCY = "rub"
ONE_WAY = "true"
DIRECT = "false"

router = Router()

async def get_price_for_date(origin: str, destination: str, date_str: str):
    url = "https://api.travelpayouts.com/aviasales/v3/prices_for_dates"
    params = {
        "origin": origin,
        "destination": destination,
        "departure_at": date_str,
        "token": API_TOKEN,
        "cy": CURRENCY,
        "one_way": ONE_WAY,
        "direct": DIRECT,
        "limit": 10,
        "page": 1,
        "sorting": "price",
        "unique": "false"
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                data = await response.json()
                if not data.get("success", False):
                    return None
                flights = data.get("data", [])
                return flights[0] if flights else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

async def track_flights(chat_id: int, origin: str, destination: str, dates: list, price_limit: int):
    while True:
        for date in dates:
            flight = await get_price_for_date(origin, destination, date)
            if flight:
                price = flight.get("price", 0)
                if int(price) < price_limit:
                    airline = flight.get("airline", "").upper()
                    departure = flight.get("departure_at", "")
                    link = flight.get("link", "")
                    message_text = (
                        f"‚úàÔ∏è <b>{get_airport_name(origin.upper())} ‚Üí {get_airport_name(destination.upper())}</b>\n"
                        f"üìÖ –î–∞—Ç–∞: <b>{date}</b>\n"
                        f"–¶–µ–Ω–∞: <b>{price} {CURRENCY.upper()}</b>\n"
                        f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: <b>{airline}</b>\n"
                        f"–í—ã–ª–µ—Ç: {departure}\n"
                        f"<a href='https://www.aviasales.ru{link}'>üîó –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
                    )

                    try:
                        await bot.send_message(chat_id, message_text)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        await asyncio.sleep(100)

@router.message(Command("track"))
async def track_command(message: types.Message):
    try:
        args = message.text.split()[1:]  # —É–±–∏—Ä–∞–µ–º /track
        if len(args) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤")
        origin = args[0].strip().upper()
        destination = args[1].strip().upper()
        dates_str = args[2].strip()
        price_limit = int(args[3])
        dates = [d.strip() for d in dates_str.split(",")]
    except Exception:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n<code>/track LED KGD 2025-08-04,2025-08-05 7000</code>")
        return

    await message.answer(
        f"üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞—é —Ä–µ–π—Å—ã <b>{get_airport_name(origin.upper())}</b> ‚Üí <b>{get_airport_name(destination.upper())}</b> –ø–æ –¥–∞—Ç–∞–º {', '.join(dates)} –ø—Ä–∏ —Ü–µ–Ω–µ –Ω–∏–∂–µ {price_limit} {CURRENCY.upper()}"
    )
    task = asyncio.create_task(
        track_flights(message.chat.id, origin, destination, dates, price_limit)
    )
    user_tasks.setdefault(message.chat.id, []).append(task)


@router.message(lambda msg: msg.text == "‚úà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å")
async def track_button_handler(message: types.Message):
    await message.answer(
        "üì• –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/track &lt;–∫–æ–¥_–≥–æ—Ä–æ–¥–∞_–≤—ã–ª–µ—Ç–∞&gt; &lt;–∫–æ–¥_–≥–æ—Ä–æ–¥–∞_–ø—Ä–∏–ª—ë—Ç–∞&gt; "
        "&lt;–¥–∞—Ç—ã_–≤—ã–ª–µ—Ç–∞_—á–µ—Ä–µ–∑_–∑–∞–ø—è—Ç—É—é&gt; &lt;–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è_—Ü–µ–Ω–∞&gt;</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "<code>/track LED KGD 2025-08-08,2025-08-09 7000</code>\n"
        "‚Ä¢ LED ‚Äî –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞\n"
        "‚Ä¢ KGD ‚Äî –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª—ë—Ç–∞\n"
        "‚Ä¢ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
        "‚Ä¢ 7000 ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞\n\n"
    )

