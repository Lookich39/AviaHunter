import asyncio
import datetime

from exceptions.all_exceptions import PastDateError, APIError, NoFlightsError
from exceptions.error_handlers import handle_past_date_error, handle_api_error, handle_no_flight_error
from utils.aviasales_api import get_price_for_date, CURRENCY
from utils.airport_codes import get_airport_name
from create_bot import bot
from db_handlers.db_class import db


async def track_flight(
    telegram_id: int,
    origin: str,
    destination: str,
    date: str,
    price_limit: int,
    tracker_id: int,
    settings: dict,
    initial_flight: dict = None,
    check_interval: int = 100
):
    first = True
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞
            flight_date = datetime.datetime.strptime(date, "%Y-%m-%d").date()
            today = datetime.date.today()

            if today > flight_date:
                raise PastDateError(date, origin, destination)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            if first and initial_flight:
                flight = initial_flight
                first = False
            else:
                flight = await get_price_for_date(origin, destination, date, settings)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ API
            if not flight or (isinstance(flight, dict) and flight.get("error")):
                await bot.send_message(
                    telegram_id,
                    f"‚ùó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {get_airport_name(origin)} ‚Üí {get_airport_name(destination)} –Ω–∞ {date}."
                )
                await asyncio.sleep(check_interval)
                continue

            # –¶–µ–Ω–∞
            #–í–û–ó–ú–û–ñ–ù–û –ù–ê–î–û –£–ë–†–ê–¢–¨ –¢–ö –ù–ê–•–û–î–ò–¢–°–Ø –í –¶–ò–ö–õ–ï –¢–†–ï–ö, –ê –ù–ï –í –í–í–û–î–ï
            price = flight.get("price")
            if not price or int(price) == 0:
                await bot.send_message(
                    telegram_id,
                    f"‚ùó –†–µ–π—Å–æ–≤ {get_airport_name(origin)} ‚Üí {get_airport_name(destination)} –Ω–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                )
                await asyncio.sleep(check_interval)
                continue

            price = int(price)

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ü–µ–Ω—É –∏–∑ –ë–î
            last_price = await db.get_last_price(tracker_id)

            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
            if last_price is None or price != last_price:
                await db.update_last_price(tracker_id, price)

                if price < price_limit:
                    airline = flight.get("airline", "").upper()
                    departure = flight.get("departure_at", "")
                    link = flight.get("link", "")

                    message_text = (
                        f"‚úàÔ∏è <b>{get_airport_name(origin)}</b> ‚Üí <b>{get_airport_name(destination)}</b>\n"
                        f"üìÖ –î–∞—Ç–∞: <b>{date}</b>\n"
                        f"–¶–µ–Ω–∞: <b>{price} {CURRENCY.upper()}</b>\n"
                        f"–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: <b>{airline}</b>\n"
                        f"–í—ã–ª–µ—Ç: {departure}\n"
                        f"<a href='https://www.aviasales.ru{link}'>üîó –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç</a>"
                    )
                    await bot.send_message(telegram_id, message_text)
        except PastDateError as e:
            await handle_past_date_error(e, telegram_id, tracker_id)
            break

        except APIError as e:
            await handle_api_error(e, telegram_id)
            break

        except NoFlightsError as e:
            await handle_no_flight_error(e, telegram_id)
            break

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ track_flight: {e}")

        await asyncio.sleep(check_interval)
